import pandas as pd
import numpy as np

class knn_model:
    mape_inter = []
    mape_mean = []

    batch_size = 10

    def time_based_knn_impute(self, df, target_col, time_col='DateTime', k=3):
        df = df.copy()
        df[time_col] = pd.to_datetime(df[time_col])
        df['TimeNumeric'] = (df[time_col] - df[time_col].min()).dt.total_seconds()  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        for idx in df[df[target_col].isna()].index:
            time_i = df.loc[idx, 'TimeNumeric']

            # –ù–∞–π–¥—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            known = df[df[target_col].notna()].copy()

            # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            known['TimeDiff'] = np.abs(known['TimeNumeric'] - time_i)

            # –ë–µ—Ä—ë–º k –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            neighbors = known.nsmallest(k, 'TimeDiff')

            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–µ–Ω—å—à–µ –≤—Ä–µ–º—è ‚Äî –±–æ–ª—å—à–µ –≤–µ—Å)
            weights = 1 / (neighbors['TimeDiff'] + 1e-5)  # —á—Ç–æ–± –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å
            imputed_value = np.average(neighbors[target_col], weights=weights)

            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
            df.at[idx, target_col] = imputed_value

        return df.drop(columns=['TimeNumeric'], errors='ignore')
    def compare_fill_methods_and_calculate_mape_knn(self, batch, original_batch=None, k=3):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤:
        - –í —Ä–µ–∂–∏–º–µ 'test': –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è + KNN –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + MAPE + –ª–æ–≥
        - –í —Ä–µ–∂–∏–º–µ 'standard': –≤—Å—ë —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –±–µ–∑ –ª–æ–≥–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫

        :param batch: DataFrame —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        :param original_batch: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DataFrame –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        :return: batch_interpolation (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π), mape_interpolation, mape_mean_fill
        """
        batch_interpolation = batch.copy()
        batch_mean_fill = batch.copy()

        interpolation_errors = []
        mean_fill_errors = []

        batch_interpolation["TimeNumeric"] = pd.to_datetime(batch_interpolation.iloc[:, 0])
        batch_interpolation["TimeNumeric"] = (batch_interpolation["TimeNumeric"] - batch_interpolation["TimeNumeric"].min()).dt.total_seconds()

        is_test = not(original_batch is None)

        for col_idx, col in enumerate(batch.columns[1:], start=1):
            for idx in range(len(batch)):
                if pd.isna(batch.iloc[idx, col_idx]):
                    original_value = None if not is_test else original_batch.iloc[idx, col_idx]
                    interpolated_value = None

                    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                    if 0 < idx < len(batch) - 1:
                        prev_val = batch_interpolation.iloc[idx - 1, col_idx]
                        next_val = batch_interpolation.iloc[idx + 1, col_idx]
                        if not pd.isna(prev_val) and not pd.isna(next_val):
                            interpolated_value = (prev_val + next_val) / 2
                            batch_interpolation.iat[idx, col_idx] = interpolated_value
                            if is_test:
                                #print(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: —Å—Ç—Ä–æ–∫–∞ {idx}, —Å—Ç–æ–ª–±–µ—Ü {col_idx}, –∑–Ω–∞—á–µ–Ω–∏–µ {interpolated_value:.4f}")
                                if original_value != 0:
                                    interpolation_errors.append(abs((original_value - interpolated_value) / original_value))

                    # KNN –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    if interpolated_value is None:
                        temp_df = batch_interpolation[[batch.columns[0], col]].rename(columns={batch.columns[0]: "DateTime"})
                        temp_df = self.time_based_knn_impute(temp_df, target_col=col, time_col="DateTime", k=k)
                        knn_value = temp_df.loc[idx, col]
                        batch_interpolation.iat[idx, col_idx] = knn_value
                        interpolated_value = knn_value
                        if is_test:
                            #print(f"KNN (–ø–æ –≤—Ä–µ–º–µ–Ω–∏): —Å—Ç—Ä–æ–∫–∞ {idx}, —Å—Ç–æ–ª–±–µ—Ü {col_idx}, –∑–Ω–∞—á–µ–Ω–∏–µ {knn_value:.4f}")
                            if original_value != 0:
                                interpolation_errors.append(abs((original_value - knn_value) / original_value))
                    if is_test:
                        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                        mean_value = batch_mean_fill.iloc[:, col_idx].mean(skipna=True)
                        batch_mean_fill.iat[idx, col_idx] = mean_value
                    if is_test and original_value != 0:
                        mean_fill_errors.append(abs((original_value - mean_value) / original_value))

        batch_interpolation.drop(columns=["TimeNumeric"], inplace=True, errors='ignore')

        if is_test:
            mape_interpolation = np.mean(interpolation_errors) if interpolation_errors else None
            mape_mean_fill = np.mean(mean_fill_errors) if mean_fill_errors else None
            return batch_interpolation, mape_interpolation, mape_mean_fill
        else:
            return batch_interpolation, None, None
    def imputation(self, batch, batch_true=None):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        if batch.shape[0] < self.batch_size:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö! –°–∏–¥–∏–º, –Ω–µ —Ä—ã–ø–∞–µ–º—Å—è...")
            return None, None

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å—á–∏—Ç–∞–µ–º MAPE –¥–ª—è KNN –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ
        batch_interpolation, inter, mean = self.compare_fill_methods_and_calculate_mape_knn(batch, batch_true)
        if inter is not None:
            self.mape_inter.append(inter)
        if mean is not None:
            self.mape_mean.append(mean)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º batch
        print("\nüìÑ –ë–∞—Ç—á —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
        print(batch)
        print("\nüìÑ –ë–∞—Ç—á —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
        print(batch_interpolation)

        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
        metrics = {}
        inter_str = f"{inter:.6f}" if inter is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        mean_str = f"{mean:.6f}" if mean is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        print(
            f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞:\n"
            f"  üîπ MAPE (–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è/KNN): {inter_str}\n"
            f"  üîπ MAPE (—Å—Ä–µ–¥–Ω–µ–µ): {mean_str}"
        )

        # –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ (MAPE) –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–∞—Ç—á–∞–º
        if self.mape_inter:
            avg_inter = sum(self.mape_inter) / len(self.mape_inter)
            print(f"\nüìà –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ (MAPE): {avg_inter:.6f}")
            metrics["MAPE"] = avg_inter
        else:
            print("\nüìà –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ (MAPE): –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            metrics["MAPE"] = None

        # –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏–º
        if self.mape_mean:
            avg_mean = sum(self.mape_mean) / len(self.mape_mean)
            print(f"\nüìâ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–∏–º (MAPE): {avg_mean:.6f}")
            metrics["MAPE_mean"] = avg_mean
        else:
            print("\nüìâ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–∏–º (MAPE): –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            metrics["MAPE_mean"] = None

        # –£–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ mean –∫ inter
        if self.mape_inter and self.mape_mean:
            improvement_ratio = (sum(self.mape_mean) / len(self.mape_mean)) / (sum(self.mape_inter) / len(self.mape_inter))
            print(f"\nüéØ –ù–∞—à–∞ –º–æ–¥–µ–ª—å –ª—É—á—à–µ –≤ {round(improvement_ratio, 1)} —Ä–∞–∑!")
            metrics["improvement"] = round(improvement_ratio, 3)
        else:
            metrics["improvement"] = None

        return batch_interpolation, metrics


